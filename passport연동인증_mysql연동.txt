1. mysql 접속하고 데이터베이스 안에 들어가서 users 테이블을 만든다.

mysql> create table users(
    -> id INT NOT NULL AUTO_INCREMENT,
    // 비어있으면 안되고 자동으로 증가
    -> authId VARCHAR(50) NOT NULL,
    -> username VARCHAR(30),
    -> password VARCHAR(255),
    -> salt VARCHAR(255),
    -> displayName VARCHAR(50),
    -> PRIMARY KEY(id),
    -> UNIQUE(authId)
    //만약 authId를 새로 입력받았는데 테이블 안에 겹치는 authId가 있으면 테이블에 해당 유저를 삽입하는 것이 거부됨
    -> ) ENGINE = InnoDB;
Query OK, 0 rows affected (0.15 sec)

2. mysql을 사용하기 위한 설정

  var mysql=require('mysql');
  var MySQLStore = require('express-mysql-session')(session);
  var options = {
      host: 'localhost',
      port: 3306,
      user: 'root',
      password: 'dlghks12',
      database: 'o2'
  };
  var conn = mysql.createConnection(options); // or mysql.createPool(options);
  conn.connect();

3.

  그리고 app.use(session({ 부분에
  store: new MySQLStore({
      host    :'localhost',
      port : 3306,
      user : 'root',
      password : 'dlghks12',
      database:'o2'
  })
  추가하여 세션을 저장할 데이터베이스를 설정.


4. 회원가입 기능을 mysql과 연동시켜야 한다. register controller의 내용을 conn.quey문을 이용하여 적절하게 수정하자.

5. 회원가입 테스트를 해보고
select * from users\G 코드를 mysql에 입력해서 users table에 회원가입 정보가 잘 저장되어 있는지 확인.

6. local strategy-serializeUser-deserializeUser 순으로 메소드를 mysql 연동되도록 수정

7. 회원가입하자마자 바로 로그인이 되어 메인창에 displayName을 띄워줄 수 있도록, 회원가입 컨트롤러에 코드를 추가.

    conn.query(sql, user, function(err, results, fields){
    // var sql = 'INSERT INTO users (authId, username, password, salt, displayName) VALUES(?, ?, ?, ?, ?)';
    // conn.query(sql, [user.authId, user.username, user.password, user.salt, user.nickname], function(err, results, fields){
      if(err){
        console.log(err);
        res.status(500);
      }else{
        req.login(user, function(err){
          req.session.save(function(){
            res.redirect('/welcome');
          })
        })
      }
    });


8. 타사인증과 mysql.

passport.use(new FacebookStrategy({
    clientID: '258883774894934',
    clientSecret: '6b22c66d42f91db46a5f6f711c7e4d61',
    callbackURL: "/auth/facebook/callback", //"http://www.example.com/auth/facebook/callback"
    profileFields:['id', 'email', 'gender', 'link', 'locale', 'name', 'timezone', 'updated_time', 'verified', 'displayName']
    // 프로필로서 어떤 값을 받아올 것인지에 대한 명시적 표시가 필요하다.
  },
  function(accessToken, refreshToken, profile, done) {
    console.log(profile);
    var sql = 'SELECT * FROM users WHERE authId=?';
    conn.query(sql, ['facebook:'+profile.id], function(err, results, fields){
      if(results.length>0){
        done(null, user); // 상기 세줄의 코드는 이 한 줄로 대체된다. 인자로서는 로그인한 사용자의 정보가 들어가있는 'user'를 준다.
      } else{ // 해당 아이디로 회원가입이 되어있지 않은 경우
        var newuser={
          'authId':'facebook:'+profile.id,
          'displayName':profile.displayName,
          'username':profile.name,
          'email':profile.emails[0].value
        };
        var sql2 = 'INSERT INTO users set ?';
        conn.query(sql2, [newuser], function(err, results, fields){
          if(err){
            console.log(err);
            done('Error');
          } else{
            done(null, newuser) //상기한 1줄을 대체하는 라인. message는 실패 시 뜨는 라인.
          }
        })
      }
    });
  }
));

## 주의사항. 만일 페이스북에서 email을 긁어서 회원정보 user database에 등록하려고 하는데
user table에 'email' key가 없는 경우에는

{ Error: ER_BAD_FIELD_ERROR: Unknown column 'email' in 'field list'

라는 오류가 발생. 따라서 user 테이블을 수정해주자. (email key가 있도록)

ALTER TABLE users ADD column email VARCHAR(50);
